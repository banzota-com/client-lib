import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { OpenAPIConfig } from './core/OpenAPI';
import { AsyncTaskService } from './services/AsyncTaskService';
import { AuthService } from './services/AuthService';
import { BankAccountService } from './services/BankAccountService';
import { CampaignService } from './services/CampaignService';
import { CollectionService } from './services/CollectionService';
import { CrossSellService } from './services/CrossSellService';
import { CurrencyService } from './services/CurrencyService';
import { DomainService } from './services/DomainService';
import { FbPixelService } from './services/FbPixelService';
import { FulfillmentAgencyService } from './services/FulfillmentAgencyService';
import { GoogleAnalyticService } from './services/GoogleAnalyticService';
import { NotificationService } from './services/NotificationService';
import { OrderService } from './services/OrderService';
import { OrderRefundsService } from './services/OrderRefundsService';
import { PaymentService } from './services/PaymentService';
import { PerformanceService } from './services/PerformanceService';
import { PingPongAccountService } from './services/PingPongAccountService';
import { PodDesignService } from './services/PodDesignService';
import { PodElementService } from './services/PodElementService';
import { PodTechniqueService } from './services/PodTechniqueService';
import { PodTemplateService } from './services/PodTemplateService';
import { ProductService } from './services/ProductService';
import { RegionalShippingService } from './services/RegionalShippingService';
import { RequestPayoutService } from './services/RequestPayoutService';
import { RequestSourcingService } from './services/RequestSourcingService';
import { ReviewService } from './services/ReviewService';
import { SettingService } from './services/SettingService';
import { StaffService } from './services/StaffService';
import { StoreService } from './services/StoreService';
import { StoreTagService } from './services/StoreTagService';
import { ThemeService } from './services/ThemeService';
import { ThemeLibraryService } from './services/ThemeLibraryService';
import { TiktokPixelService } from './services/TiktokPixelService';
import { TransactionService } from './services/TransactionService';
import { UploadService } from './services/UploadService';
import { UserService } from './services/UserService';
import { VariantService } from './services/VariantService';
import { VariantComboService } from './services/VariantComboService';
import { WalletService } from './services/WalletService';
type HttpRequestConstructor = new (config: OpenAPIConfig) => BaseHttpRequest;
export declare class ClientApi {
    readonly asyncTask: AsyncTaskService;
    readonly auth: AuthService;
    readonly bankAccount: BankAccountService;
    readonly campaign: CampaignService;
    readonly collection: CollectionService;
    readonly crossSell: CrossSellService;
    readonly currency: CurrencyService;
    readonly domain: DomainService;
    readonly fbPixel: FbPixelService;
    readonly fulfillmentAgency: FulfillmentAgencyService;
    readonly googleAnalytic: GoogleAnalyticService;
    readonly notification: NotificationService;
    readonly order: OrderService;
    readonly orderRefunds: OrderRefundsService;
    readonly payment: PaymentService;
    readonly performance: PerformanceService;
    readonly pingPongAccount: PingPongAccountService;
    readonly podDesign: PodDesignService;
    readonly podElement: PodElementService;
    readonly podTechnique: PodTechniqueService;
    readonly podTemplate: PodTemplateService;
    readonly product: ProductService;
    readonly regionalShipping: RegionalShippingService;
    readonly requestPayout: RequestPayoutService;
    readonly requestSourcing: RequestSourcingService;
    readonly review: ReviewService;
    readonly setting: SettingService;
    readonly staff: StaffService;
    readonly store: StoreService;
    readonly storeTag: StoreTagService;
    readonly theme: ThemeService;
    readonly themeLibrary: ThemeLibraryService;
    readonly tiktokPixel: TiktokPixelService;
    readonly transaction: TransactionService;
    readonly upload: UploadService;
    readonly user: UserService;
    readonly variant: VariantService;
    readonly variantCombo: VariantComboService;
    readonly wallet: WalletService;
    readonly request: BaseHttpRequest;
    constructor(config?: Partial<OpenAPIConfig>, HttpRequest?: HttpRequestConstructor);
}
export {};
